{"ast":null,"code":"// src/stores/ProductStore.ts\nimport { makeAutoObservable } from \"mobx\";\nimport { api } from \"../shared/api.ts\"; // Убедитесь, что путь правильный\n\nclass ProductStore {\n  constructor() {\n    this.products = [];\n    this.currentPage = 0;\n    this.itemsPerPage = 7;\n    this.selectedCategory = 'Все';\n    this.searchTerm = '';\n    this.sortKey = 'количество';\n    makeAutoObservable(this);\n  }\n  async fetchProducts(userId) {\n    try {\n      const response = await api.allProducts(userId);\n      this.products = response.data || [];\n    } catch (error) {\n      console.error(\"Ошибка при загрузке продуктов:\", error);\n    }\n  }\n  deleteProduct(productId) {\n    this.products = this.products.filter(product => product.id !== productId);\n  }\n  get displayedItems() {\n    return this.products.filter(item => (this.selectedCategory === 'Все' || item.category === this.selectedCategory) && item.name.toLowerCase().includes(this.searchTerm.toLowerCase())).sort((a, b) => {\n      const aValue = this.sortKey === 'количество' && a.quantity ? a.quantity : a.price;\n      const bValue = this.sortKey === 'количество' && b.quantity ? b.quantity : b.price;\n      return aValue - bValue;\n    }).slice(this.currentPage * this.itemsPerPage, (this.currentPage + 1) * this.itemsPerPage);\n  }\n  get totalPages() {\n    return Math.ceil(this.products.length / this.itemsPerPage);\n  }\n}\nexport const productStore = new ProductStore();","map":{"version":3,"names":["makeAutoObservable","api","ProductStore","constructor","products","currentPage","itemsPerPage","selectedCategory","searchTerm","sortKey","fetchProducts","userId","response","allProducts","data","error","console","deleteProduct","productId","filter","product","id","displayedItems","item","category","name","toLowerCase","includes","sort","a","b","aValue","quantity","price","bValue","slice","totalPages","Math","ceil","length","productStore"],"sources":["C:/Users/user/Desktop/FCDgameStore/client/src/features/ProductStore.ts"],"sourcesContent":["// src/stores/ProductStore.ts\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { api } from \"../shared/api.ts\"; // Убедитесь, что путь правильный\r\n\r\nexport interface GameData {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    keygame: string;\r\n    price: number;\r\n    img: string;\r\n    category: string;\r\n    quantity?: number;\r\n    purchased?: number;\r\n}\r\n\r\nclass ProductStore {\r\n    products: GameData[] = [];\r\n    currentPage: number = 0;\r\n    itemsPerPage: number = 7;\r\n    selectedCategory: string = 'Все';\r\n    searchTerm: string = '';\r\n    sortKey: string = 'количество';\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    async fetchProducts(userId: string) {\r\n        try {\r\n            const response = await api.allProducts(userId);\r\n            this.products = response.data || [];\r\n        } catch (error) {\r\n            console.error(\"Ошибка при загрузке продуктов:\", error);\r\n        }\r\n    }\r\n\r\n    deleteProduct(productId: string) {\r\n        this.products = this.products.filter(product => product.id !== productId);\r\n    }\r\n\r\n    get displayedItems() {\r\n        return this.products\r\n            .filter(item =>\r\n                (this.selectedCategory === 'Все' || item.category === this.selectedCategory) &&\r\n                item.name.toLowerCase().includes(this.searchTerm.toLowerCase())\r\n            )\r\n            .sort((a, b) => {\r\n                const aValue = this.sortKey === 'количество' && a.quantity ? a.quantity : a.price;\r\n                const bValue = this.sortKey === 'количество' && b.quantity ? b.quantity : b.price;\r\n                return aValue - bValue;\r\n            })\r\n            .slice(this.currentPage * this.itemsPerPage, (this.currentPage + 1) * this.itemsPerPage);\r\n    }\r\n\r\n    get totalPages() {\r\n        return Math.ceil(this.products.length / this.itemsPerPage);\r\n    }\r\n}\r\n\r\nexport const productStore = new ProductStore();"],"mappings":"AAAA;AACA,SAASA,kBAAkB,QAAQ,MAAM;AACzC,SAASC,GAAG,QAAQ,kBAAkB,CAAC,CAAC;;AAcxC,MAAMC,YAAY,CAAC;EAQfC,WAAWA,CAAA,EAAG;IAAA,KAPdC,QAAQ,GAAe,EAAE;IAAA,KACzBC,WAAW,GAAW,CAAC;IAAA,KACvBC,YAAY,GAAW,CAAC;IAAA,KACxBC,gBAAgB,GAAW,KAAK;IAAA,KAChCC,UAAU,GAAW,EAAE;IAAA,KACvBC,OAAO,GAAW,YAAY;IAG1BT,kBAAkB,CAAC,IAAI,CAAC;EAC5B;EAEA,MAAMU,aAAaA,CAACC,MAAc,EAAE;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,WAAW,CAACF,MAAM,CAAC;MAC9C,IAAI,CAACP,QAAQ,GAAGQ,QAAQ,CAACE,IAAI,IAAI,EAAE;IACvC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IAC1D;EACJ;EAEAE,aAAaA,CAACC,SAAiB,EAAE;IAC7B,IAAI,CAACd,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACe,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAKH,SAAS,CAAC;EAC7E;EAEA,IAAII,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAAClB,QAAQ,CACfe,MAAM,CAACI,IAAI,IACR,CAAC,IAAI,CAAChB,gBAAgB,KAAK,KAAK,IAAIgB,IAAI,CAACC,QAAQ,KAAK,IAAI,CAACjB,gBAAgB,KAC3EgB,IAAI,CAACE,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,IAAI,CAACnB,UAAU,CAACkB,WAAW,CAAC,CAAC,CAClE,CAAC,CACAE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MACZ,MAAMC,MAAM,GAAG,IAAI,CAACtB,OAAO,KAAK,YAAY,IAAIoB,CAAC,CAACG,QAAQ,GAAGH,CAAC,CAACG,QAAQ,GAAGH,CAAC,CAACI,KAAK;MACjF,MAAMC,MAAM,GAAG,IAAI,CAACzB,OAAO,KAAK,YAAY,IAAIqB,CAAC,CAACE,QAAQ,GAAGF,CAAC,CAACE,QAAQ,GAAGF,CAAC,CAACG,KAAK;MACjF,OAAOF,MAAM,GAAGG,MAAM;IAC1B,CAAC,CAAC,CACDC,KAAK,CAAC,IAAI,CAAC9B,WAAW,GAAG,IAAI,CAACC,YAAY,EAAE,CAAC,IAAI,CAACD,WAAW,GAAG,CAAC,IAAI,IAAI,CAACC,YAAY,CAAC;EAChG;EAEA,IAAI8B,UAAUA,CAAA,EAAG;IACb,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAAClC,QAAQ,CAACmC,MAAM,GAAG,IAAI,CAACjC,YAAY,CAAC;EAC9D;AACJ;AAEA,OAAO,MAAMkC,YAAY,GAAG,IAAItC,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}