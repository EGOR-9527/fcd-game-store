{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n// Ensure this is a .ts file\nimport axios from 'axios';\nconst API_URL = 'http://localhost:7000/api/';\nclass RestApi {\n  // Добавляем состояние для продавца\n\n  constructor() {\n    this.error = null;\n    this.user = null;\n    this.vendor = null;\n    makeAutoObservable(this);\n    this.loadUserFromLocalStorage(); // Загружаем пользователя и продавца из localStorage при инициализации\n  }\n  setError(error) {\n    this.error = error;\n  }\n  clearError() {\n    this.setError(null);\n  }\n  setUser(user) {\n    this.user = user;\n    if (user) {\n      localStorage.setItem('user', JSON.stringify(user)); // Сохраняем пользователя в localStorage\n    } else {\n      localStorage.removeItem('user'); // Удаляем пользователя из localStorage, если он null\n    }\n  }\n  setVendor(vendor) {\n    this.vendor = vendor;\n    if (vendor) {\n      localStorage.setItem('vendor', JSON.stringify(vendor)); // Сохраняем продавца в localStorage\n    } else {\n      localStorage.removeItem('vendor'); // Удаляем продавца из localStorage, если он null\n    }\n  }\n  loadUserFromLocalStorage() {\n    const user = localStorage.getItem('user');\n    const vendor = localStorage.getItem('vendor');\n    if (user) {\n      this.setUser(JSON.parse(user)); // Загружаем пользователя из localStorage\n    }\n    if (vendor) {\n      this.setVendor(JSON.parse(vendor)); // Загружаем продавца из localStorage\n    }\n  }\n  async register(email, password, type, nick, nameCompany) {\n    try {\n      const response = await axios.post(`${API_URL}${type}/registration`, {\n        email,\n        password,\n        nick,\n        nameCompany\n      });\n      if (type === 'vendor') {\n        this.setVendor(response.data); // Сохраняем продавца\n      } else {\n        this.setUser(response.data); // Сохраняем пользователя\n      }\n      this.clearError();\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n  async login(email, password, type) {\n    try {\n      const response = await axios.post(`${API_URL}${type}/login`, {\n        email,\n        password\n      });\n      if (type === 'vendor') {\n        this.setVendor(response.data); // Сохраняем продавца\n      } else {\n        this.setUser(response.data); // Сохраняем пользователя\n      }\n      this.clearError();\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n  async addProduct(img, name, description, key) {\n    try {\n      // Логика добавления продукта\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n  async refresh() {\n    try {\n      const response = await axios.get(`${API_URL}refresh`, {\n        withCredentials: true\n      });\n      this.setUser(response.data); // Обновляем пользователя\n      this.clearError();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  handleError(error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response;\n      const errorResponse = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data;\n      const message = (errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.message) || \"Неизвестная ошибка\";\n      console.log(\"message: \" + message);\n      this.setError({\n        message\n      });\n    } else {\n      this.setError({\n        message: \"Неизвестная ошибка\"\n      });\n    }\n  }\n}\nexport const api = new RestApi();","map":{"version":3,"names":["makeAutoObservable","axios","API_URL","RestApi","constructor","error","user","vendor","loadUserFromLocalStorage","setError","clearError","setUser","localStorage","setItem","JSON","stringify","removeItem","setVendor","getItem","parse","register","email","password","type","nick","nameCompany","response","post","data","err","handleError","login","addProduct","img","name","description","key","refresh","get","withCredentials","isAxiosError","_error$response","errorResponse","message","console","log","api"],"sources":["C:/Users/user/Desktop/FCDgameStore/client/src/shared/api.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { AuthResponse } from '../entities/AuthResponse.tsx';\r\nimport { ErrorType } from '../entities/ErrorSchema.tsx'; // Ensure this is a .ts file\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:7000/api/';\r\n\r\nclass RestApi {\r\n    error: ErrorType | null = null;\r\n    user: AuthResponse | null = null;\r\n    vendor: AuthResponse | null = null; // Добавляем состояние для продавца\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n        this.loadUserFromLocalStorage(); // Загружаем пользователя и продавца из localStorage при инициализации\r\n    }\r\n\r\n    setError(error: ErrorType | null) {\r\n        this.error = error;\r\n    }\r\n\r\n    clearError() {\r\n        this.setError(null);\r\n    }\r\n\r\n    setUser (user: AuthResponse | null) {\r\n        this.user = user;\r\n        if (user) {\r\n            localStorage.setItem('user', JSON.stringify(user)); // Сохраняем пользователя в localStorage\r\n        } else {\r\n            localStorage.removeItem('user'); // Удаляем пользователя из localStorage, если он null\r\n        }\r\n    }\r\n\r\n    setVendor(vendor: AuthResponse | null) {\r\n        this.vendor = vendor;\r\n        if (vendor) {\r\n            localStorage.setItem('vendor', JSON.stringify(vendor)); // Сохраняем продавца в localStorage\r\n        } else {\r\n            localStorage.removeItem('vendor'); // Удаляем продавца из localStorage, если он null\r\n        }\r\n    }\r\n\r\n    loadUserFromLocalStorage() {\r\n        const user = localStorage.getItem('user');\r\n        const vendor = localStorage.getItem('vendor');\r\n        if (user) {\r\n            this.setUser (JSON.parse(user)); // Загружаем пользователя из localStorage\r\n        }\r\n        if (vendor) {\r\n            this.setVendor(JSON.parse(vendor)); // Загружаем продавца из localStorage\r\n        }\r\n    }\r\n\r\n    async register(email: string, password: string, type: 'user' | 'vendor', nick?: string, nameCompany?: string) {\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${API_URL}${type}/registration`, { email, password, nick, nameCompany });\r\n            if (type === 'vendor') {\r\n                this.setVendor(response.data); // Сохраняем продавца\r\n            } else {\r\n                this.setUser (response.data); // Сохраняем пользователя\r\n            }\r\n            this.clearError();\r\n        } catch (err) {\r\n            this.handleError(err);\r\n        }\r\n    }\r\n\r\n    async login(email: string, password: string, type: 'user' | 'vendor') {\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${API_URL}${type}/login`, { email, password });\r\n            if (type === 'vendor') {\r\n                this.setVendor(response.data); // Сохраняем продавца\r\n            } else {\r\n                this.setUser (response.data); // Сохраняем пользователя\r\n            }\r\n            this.clearError();\r\n        } catch (err) {\r\n            this.handleError(err);\r\n        }\r\n    }\r\n\r\n    async addProduct(img: File, name: string, description: string, key: string) {\r\n        try {\r\n            // Логика добавления продукта\r\n        } catch (err) {\r\n            this.handleError(err);\r\n        }\r\n    }\r\n\r\n    async refresh() {\r\n        try {\r\n            const response = await axios.get<AuthResponse>(`${API_URL}refresh`, { withCredentials: true });\r\n            this.setUser (response.data); // Обновляем пользователя\r\n            this.clearError();\r\n        } catch (error) {\r\n            this.handleError(error);\r\n        }\r\n    }\r\n\r\n    private handleError(error: any): void {\r\n        if (axios.isAxiosError(error)) {\r\n            const errorResponse = error.response?.data;\r\n            const message = errorResponse?.message || \"Неизвестная ошибка\";\r\n            console.log(\"message: \" + message);\r\n            this.setError({ message });\r\n        } else {\r\n            this.setError({ message: \"Неизвестная ошибка\" });\r\n        }\r\n    }\r\n}\r\n\r\nexport const api = new RestApi();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}