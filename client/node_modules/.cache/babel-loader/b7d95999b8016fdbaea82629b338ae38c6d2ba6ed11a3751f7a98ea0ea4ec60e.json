{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n// Ensure this is a .ts file\nimport axios from 'axios';\nconst API_URL = 'http://localhost:7000/api/';\nclass RestApi {\n  constructor() {\n    this.error = null;\n    this.user = null;\n    makeAutoObservable(this);\n  }\n  setError(error) {\n    this.error = error;\n  }\n  clearError() {\n    this.setError(null);\n  }\n  setUser(user) {\n    this.user = user;\n  }\n  async register(email, password, type, nick, nameCompany) {\n    try {\n      const response = await axios.post(`${API_URL}${type}/registration`, {\n        email,\n        password,\n        nick,\n        nameCompany\n      });\n      console.log(\"response.data: \", response.data);\n      console.log(\"response: \", response);\n\n      // Сохраняем данные в нужном формате\n      const userData = {\n        id: response.data.vendor.id,\n        // Предполагается, что id возвращается от сервера\n        userId: response.data.vendor.userId,\n        // Предполагается, что userId возвращается от сервера\n        token: response.data.tokens.refreshToken,\n        // Предполагается, что refreshToken возвращается от сервера\n        createdAt: response.data.createdAt,\n        // Предполагается, что createdAt возвращается от сервера\n        updatedAt: response.data.updatedAt // Предполагается, что updatedAt возвращается от сервера\n      };\n      localStorage.setItem(\"dataUser \", JSON.stringify(userData));\n      this.setUser(userData);\n      this.clearError();\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n  async login(email, password, type) {\n    try {\n      const response = await axios.post(`${API_URL}${type}/login`, {\n        email,\n        password\n      });\n      console.log(response.data.refreshToken);\n\n      // Сохраняем данные в нужном формате\n      const userData = {\n        id: response.data.vendor.id,\n        // Предполагается, что id возвращается от сервера\n        userId: response.data.vendor.userId,\n        // Предполагается, что userId возвращается от сервера\n        token: response.data.tokens.refreshToken,\n        // Предполагается, что refreshToken возвращается от сервера\n        createdAt: response.data.createdAt,\n        // Предполагается, что createdAt возвращается от сервера\n        updatedAt: response.data.updatedAt // Предполагается, что updatedAt возвращается от сервера\n      };\n      localStorage.setItem(\"dataUser \", JSON.stringify(userData));\n      this.setUser(userData);\n      this.clearError();\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n  async addProduct(formData) {\n    try {\n      const response = await axios.post(`${API_URL}/vendor/addProduct`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data' // Убедитесь, что заголовок установлен\n        }\n      });\n      return response.data; // Возвращаем ответ, если нужно\n    } catch (err) {\n      this.handleError(err);\n    }\n  }\n  async refresh() {\n    try {\n      const response = await axios.get(`${API_URL}refresh`, {\n        withCredentials: true\n      });\n      this.setUser(response.data);\n      this.clearError();\n    } catch (error) {\n      this.handleError(error);\n    }\n  }\n  handleError(error) {\n    if (axios.isAxiosError(error)) {\n      var _error$response;\n      const errorResponse = (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data;\n      const message = (errorResponse === null || errorResponse === void 0 ? void 0 : errorResponse.message) || \"Неизвестная ошибка\";\n      console.log(\"message: \" + message);\n      this.setError({\n        message\n      });\n    } else {\n      this.setError({\n        message: \"Неизвестная ошибка\"\n      });\n    }\n  }\n}\nexport const api = new RestApi();","map":{"version":3,"names":["makeAutoObservable","axios","API_URL","RestApi","constructor","error","user","setError","clearError","setUser","register","email","password","type","nick","nameCompany","response","post","console","log","data","userData","id","vendor","userId","token","tokens","refreshToken","createdAt","updatedAt","localStorage","setItem","JSON","stringify","err","handleError","login","addProduct","formData","headers","refresh","get","withCredentials","isAxiosError","_error$response","errorResponse","message","api"],"sources":["C:/Users/user/Desktop/FCDgameStore/client/src/shared/api.ts"],"sourcesContent":["import { makeAutoObservable } from 'mobx';\r\nimport { AuthResponse } from '../entities/AuthResponse.tsx';\r\nimport { ErrorType } from '../entities/ErrorSchema.tsx'; // Ensure this is a .ts file\r\nimport axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:7000/api/';\r\n\r\nclass RestApi {\r\n    error: ErrorType | null = null;\r\n    user: AuthResponse | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setError(error: ErrorType | null) {\r\n        this.error = error;\r\n    }\r\n\r\n    clearError() {\r\n        this.setError(null);\r\n    }\r\n\r\n    setUser (user: AuthResponse | null) {\r\n        this.user = user;\r\n    }\r\n\r\n    async register(email: string, password: string, type: 'user' | 'vendor', nick?: string, nameCompany?: string) {\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${API_URL}${type}/registration`, { email, password, nick, nameCompany });\r\n            console.log(\"response.data: \", response.data);\r\n            console.log(\"response: \", response);\r\n            \r\n            // Сохраняем данные в нужном формате\r\n            const userData = {\r\n                id: response.data.vendor.id, // Предполагается, что id возвращается от сервера\r\n                userId: response.data.vendor.userId, // Предполагается, что userId возвращается от сервера\r\n                token: response.data.tokens.refreshToken, // Предполагается, что refreshToken возвращается от сервера\r\n                createdAt: response.data.createdAt, // Предполагается, что createdAt возвращается от сервера\r\n                updatedAt: response.data.updatedAt, // Предполагается, что updatedAt возвращается от сервера\r\n            };\r\n    \r\n            localStorage.setItem(\"dataUser \", JSON.stringify(userData));\r\n            this.setUser (userData);\r\n            this.clearError();\r\n        } catch (err) {\r\n            this.handleError(err);\r\n        }\r\n    }\r\n    \r\n    async login(email: string, password: string, type: 'user' | 'vendor') {\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${API_URL}${type}/login`, { email, password });\r\n            console.log(response.data.refreshToken);\r\n            \r\n            // Сохраняем данные в нужном формате\r\n            const userData = {\r\n                id: response.data.vendor.id, // Предполагается, что id возвращается от сервера\r\n                userId: response.data.vendor.userId, // Предполагается, что userId возвращается от сервера\r\n                token: response.data.tokens.refreshToken, // Предполагается, что refreshToken возвращается от сервера\r\n                createdAt: response.data.createdAt, // Предполагается, что createdAt возвращается от сервера\r\n                updatedAt: response.data.updatedAt, // Предполагается, что updatedAt возвращается от сервера\r\n            };\r\n    \r\n            localStorage.setItem(\"dataUser \", JSON.stringify(userData));\r\n            this.setUser (userData);\r\n            this.clearError();\r\n        } catch (err) {\r\n            this.handleError(err);\r\n        }\r\n    }\r\n\r\n    async addProduct(formData: FormData) {\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${API_URL}/vendor/addProduct`, formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data', // Убедитесь, что заголовок установлен\r\n                },\r\n            });\r\n            return response.data; // Возвращаем ответ, если нужно\r\n        } catch (err) {\r\n            this.handleError(err);\r\n        }\r\n    }\r\n\r\n    async refresh() {\r\n        try {\r\n            const response = await axios.get<AuthResponse>(`${API_URL}refresh`, { withCredentials: true });\r\n            this.setUser (response.data);\r\n            this.clearError();\r\n        } catch (error) {\r\n            this.handleError(error);\r\n        }\r\n    }\r\n\r\n    private handleError(error: any): void {\r\n        if (axios.isAxiosError(error)) {\r\n            const errorResponse = error.response?.data;\r\n            const message = errorResponse?.message || \"Неизвестная ошибка\";\r\n            console.log(\"message: \" + message);\r\n            this.setError({ message });\r\n        } else {\r\n            this.setError({ message: \"Неизвестная ошибка\" });\r\n        }\r\n    }\r\n}\r\n\r\nexport const api = new RestApi();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}